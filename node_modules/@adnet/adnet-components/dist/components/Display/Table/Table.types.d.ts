import { MouseEvent } from 'react';
import { ComponentState } from '../../../../../../../src/constants/ComponentState';
import { IFiltersProps } from '../../../../../../../src/lib/factory/inputFactory';
import { IStatusData } from './components/TableHeader/Status/Status.types';
export interface ITableProps {
    data: any[];
}
export interface IAdnetTableProps {
    /** Any array of objects */
    data: any[];
    /** The state of the component */
    componentState: ComponentState;
    /** Submit form handler */
    onSubmitClick?: (data: any) => void;
    /** Status filtering json */
    statusData?: IStatusData[];
    /** Status overrides by replacing values like true/false/undefined/null with their appropriate styled counterparts */
    statusOverrideColumns?: string[];
    /** Optional tableName */
    tableName?: string;
    filters?: IFiltersProps[];
    hasForm?: boolean;
    hasSearch?: boolean;
    /** Hide the settings icon in the table header */
    hasSettings?: boolean;
    /** A handler to expose values for the popup options click event */
    onClickRowPopUpOption?: (e: {
        event: MouseEvent<HTMLDivElement>;
        value: string;
        payload?: any;
    }) => void;
    /** Optional array to hide certain columns */
    hideColumns?: string[] | number[];
    /** Optional array that splits the data into multiple tables */
    splitBy?: string[];
    /** Optional table row actions */
    tableRowActions?: TTableRowActions[] | undefined;
    /** Optional date format */
    dateFormatPattern?: string;
    /** Do the tableRowActions appear as a popup or not */
    hasPopup?: boolean;
    /** Custom cell override prop */
    customColumnCellRender?: TCustomCellColumn[];
    /** Custom column cell value override */
    valueOverride?: TValueOverride[];
    /** Custom row color override based on value provided */
    colorRow?: TColorRowOverride[];
    /** Optional table height property that only affects double table (problem with overflow css) */
    tableHeight?: number;
    /** Optional override for different colored table */
    tableColor?: string;
    /** Optional sort disabler for certain rows */
    hideSortForColumns?: number[];
    /** Table column header font size */
    fontSizeColumnHeader?: number;
    /** Table body font size */
    fontSizeTableBody?: number;
    /** Table body font size */
    fontSizeHeader?: number;
    /** Optional table header title override */
    titleOverride?: TTitleOverride[];
    /** Optional table header title override */
    tableRowHeight?: number;
    /** Optional only if there is additional logic to handle */
    tableRowActionsHelperColumns?: number[];
    /** refresh logic add to table */
    refreshHandler?: () => void;
    /** Custom override for the footer*/
    customFooter?: JSX.Element;
    /** Actions for pressing a certain row  */
    handleRowClick?: (e: {
        rowId: number;
        event: MouseEvent<HTMLDivElement>;
    }) => void;
}
export type ColumnRowMetaData = {
    columnCount: number;
    rowCount: number;
};
export type TableRowActions = {
    lable: string;
};
export type TableMetaData = {
    tableCount: number;
};
export type TTableStructure = {
    metaData: TableMetaData;
    tableBodies: TTableBody[];
};
export type TableColumn = {
    columnId: number;
    columnName: string;
    columnOrder: number;
    columnDataType: string;
};
export type TTableBody = {
    tableData: TableData[];
    tableColumns: TableColumn[];
    metaData: ColumnRowMetaData;
    tableRowActions?: TTableRowActions[];
};
export type TCustomCellColumn = {
    columnId: number;
    customCell: React.ComponentType<{
        children: any;
    }>;
};
export type TValueOverride = {
    columnId: number;
    value: TValues[];
};
export type TValues = {
    valueToCheck: string;
    valueToReplace: string;
};
export type TColorRowOverride = {
    properties: string[];
    color: string;
};
export type TTitleOverride = {
    title: string;
    columnId?: number;
    columnName?: string;
};
export type TableData = {
    entryId: number;
    columnId: number;
    value: string;
};
export type TTableRowActions = {
    label: string;
    url: string;
    requestBody: any;
    icon?: JSX.Element;
    action?: string;
};
export type TableOpenController = {
    animationName: string;
    isOpen: boolean;
};
export type StatusObject = {
    key: number;
    value: string;
};
export type SortTableData = {
    sortingColumn: number | undefined;
    sortingDataType: string;
    sortDirection: string;
};
