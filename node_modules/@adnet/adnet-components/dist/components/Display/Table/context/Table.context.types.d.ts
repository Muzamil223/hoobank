import { MouseEvent } from 'react';
import { IFiltersProps } from '../../../../../../../../src/lib/factory/inputFactory';
import { TTableStructure, StatusObject, SortTableData, TableOpenController, TCustomCellColumn, TColorRowOverride, TTitleOverride, TValueOverride, TTableRowActions } from '../Table.types';
import { IStatusData } from '../components/TableHeader/Status/Status.types';
import { ComponentState } from '../../../../../../../../src/constants/ComponentState';
export interface TableContextType {
    /** The initial data to be displayed in the table. */
    initialTableData: any[];
    /** Function to update the initial table data. */
    setInitialTableData: React.Dispatch<React.SetStateAction<any[]>>;
    /** The current structure of the table data. */
    tableData: TTableStructure;
    /** Function to update the table data structure. */
    setTableData: React.Dispatch<React.SetStateAction<TTableStructure>>;
    /** The current state of the component. */
    componentState: ComponentState;
    /** Function to update the component state. */
    setComponentState: React.Dispatch<React.SetStateAction<ComponentState>>;
    /** The total count of items in the table. */
    totalCount: number | undefined;
    /** Function to update the total count. */
    setTotalCount: React.Dispatch<React.SetStateAction<number | undefined>>;
    /** The current search term for filtering table data. */
    searchTerm: string;
    /** Function to update the search term. */
    setSearchTerm: React.Dispatch<React.SetStateAction<string>>;
    /** The currently selected status values. */
    selectedValues: StatusObject[];
    /** Function to update the selected status values. */
    setSelectedValues: React.Dispatch<React.SetStateAction<StatusObject[]>>;
    /** The column by which the table data is sorted. */
    columnToSortBy: SortTableData;
    /** Function to update the sorting column. */
    setColumnToSortBy: React.Dispatch<React.SetStateAction<SortTableData>>;
    /** Controls the visibility of the table. */
    isTableOpen: TableOpenController;
    /** Function to toggle the table's visibility. */
    setIsTableOpen: React.Dispatch<React.SetStateAction<TableOpenController>>;
    /** Controls the visibility of the form. */
    isFormOpen: TableOpenController;
    /** Function to toggle the form's visibility. */
    setIsFormOpen: React.Dispatch<React.SetStateAction<TableOpenController>>;
    /** Columns by which the data should be split into multiple tables. */
    splitBy?: string[];
    /** Overrides the default table color. */
    tableColor?: string;
    /** Custom rendering for the table footer. */
    customFooter?: JSX.Element;
    /** JSON data for filtering statuses. */
    statusData?: IStatusData[];
    /** Optional name for the table. */
    tableName?: string;
    /** Props for configuring the filter header. */
    filters: IFiltersProps[];
    /** Function to update the filter props. */
    setFilters: React.Dispatch<React.SetStateAction<IFiltersProps[]>>;
    /** Determines if the table includes a form. */
    hasForm?: boolean;
    /** Determines if the table includes a search bar. */
    hasSearch?: boolean;
    /** Determines if table row actions should be displayed as a popup. */
    hasPopup?: boolean;
    /** Determines if the settings icon is visible in the table header. */
    hasSettings?: boolean;
    /** Font size for the table header. */
    fontSizeHeader?: number;
    /** Font size for the table column headers. */
    fontSizeColumnHeader?: number;
    /** Font size for the table body. */
    fontSizeTableBody?: number;
    /** Columns to hide in the table. */
    hideColumns?: string[] | number[];
    /** Date format pattern for date columns. */
    dateFormatPattern: string;
    /** Custom rendering for specific columns. */
    customColumnCellRender?: TCustomCellColumn[];
    /** Overrides for custom row colors. */
    colorRow?: TColorRowOverride[];
    /** Fixed height for the table. */
    tableHeight?: number;
    /** Columns for which sorting should be disabled. */
    hideSortForColumns?: number[];
    /** Overrides for table header titles. */
    titleOverride?: TTitleOverride[];
    /** Fixed height for table rows. */
    tableRowHeight?: number;
    /** Custom column cell value override */
    valueOverride?: TValueOverride[];
    /** Status overrides by replacing values like true/false/undefined/null with their appropriate styled counterparts */
    statusOverrideColumns?: string[];
    /** Optional only if there is additional logic to handle */
    tableRowActionsHelperColumns?: number[];
    /** refresh logic add to table */
    refreshHandler?: () => void;
    /** Submit form handler */
    onSubmitClick?: (data: any) => void;
    /** Actions for pressing a certain row  */
    handleRowClick?: (e: {
        rowId: number;
        event: MouseEvent<HTMLDivElement>;
    }) => void;
    /** A handler to expose values for the popup options click event */
    onClickRowPopUpOption?: (e: {
        event: MouseEvent<HTMLDivElement>;
        value: string;
        payload?: any;
    }) => void;
    tableCount: number;
    setTableCount: React.Dispatch<React.SetStateAction<number>>;
    updateData: (newData: TTableStructure) => void;
    updateStatusData: (newData: IStatusData[] | undefined) => void;
    tableRowActions: TTableRowActions[] | undefined;
}
export interface TableContextInitialProps {
    initialTableData: any[];
    tableData: TTableStructure;
    componentState: ComponentState;
    totalCount?: number;
    splitBy?: string[];
    tableColor?: string;
    customFooter?: JSX.Element;
    statusData?: IStatusData[];
    tableName?: string;
    filters: IFiltersProps[];
    hasForm?: boolean;
    hasSearch?: boolean;
    hasPopup?: boolean;
    hasSettings?: boolean;
    fontSizeHeader?: number;
    fontSizeColumnHeader?: number;
    fontSizeTableBody?: number;
    hideColumns?: string[] | number[];
    dateFormatPattern: string;
    customColumnCellRender?: TCustomCellColumn[];
    colorRow?: TColorRowOverride[];
    tableHeight?: number;
    hideSortForColumns?: number[];
    titleOverride?: TTitleOverride[];
    tableRowHeight?: number;
    valueOverride?: TValueOverride[];
    statusOverrideColumns?: string[];
    tableRowActionsHelperColumns?: number[];
    tableRowActions: TTableRowActions[] | undefined;
}
